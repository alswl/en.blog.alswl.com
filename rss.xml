<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Log4D</title>
    <link>https://en.blog.alswl.com/</link>
    <description>Recent content on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Apr 2023 11:34:18 +0800</lastBuildDate><atom:link href="https://en.blog.alswl.com/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pragmatic web API guidlines</title>
      <link>https://en.blog.alswl.com/2023/04/web-api-guidelines/</link>
      <pubDate>Mon, 03 Apr 2023 11:34:18 +0800</pubDate>
      
      <guid>https://en.blog.alswl.com/2023/04/web-api-guidelines/</guid>
      <description>When starting to create a new system, or participating in a new team or project, there is a simple but profound question: Is there a design specification for the API of this system (Web Server)?
image by stable difussion, prompt by alswl
This issue has bothered me for a long time, starting during my school days, and every time I needed to communicate and discuss with my team members. From the initial free style to the later REST, I often referenced Github v3 to the project team and the Foursqure API (no longer accessible, exposing age) documentation.</description>
      <content:encoded><![CDATA[<p>When starting to create a new system, or participating in a new team or project, there is a simple but profound question: Is there a design specification for the API of this system (Web Server)?</p>
<p>




<img loading="lazy" src="/images/202304/pyramid.png" alt="pyramid"  />


</p>
<p><small>image by stable difussion, prompt by alswl</small></p>
<p>This issue has bothered me for a long time, starting during my school days, and every time I needed to communicate and discuss with my team members.
From the initial free style to the later REST, I often referenced <a href="https://docs.github.com/en/rest?apiVersion=2022-11-28">Github v3</a> to the project team and the
Foursqure API (no longer accessible, exposing age) documentation.
However, in practice, there are still cases where there is a mismatch with the actual work or the common company specification.
This is when I need to do some additional work. Eventually, I will write a brief <code>DEVELOPMENT.md</code> document to describe the design solution.</p>
<p>But I&rsquo;ve always had more ideas for that document, and it&rsquo;s not quite good enough. So, I wanted to put together a <mark>Simple and Pragmatic</mark> Web API best practice, which is this article.</p>
<h2 id="why-we-need-api-uniformity-specifications">Why We Need API Uniformity Specifications</h2>
<p>The problem seems obvious, but a deeper analysis involves teamwork efficiency and engineering design philosophy.</p>
<p>API (Application Programming Interface) is the bridge between different software systems to interact with each other. When communicating between different software systems, the
APIs allow data transfer and processing in a standardized way, enabling the integration of various applications.</p>
<p>When we start writing API documentation, a paradigm (Design Pattern) emerges, whether it is explicit or implicit, whether
Whether it is one set for each or a common set. This is just like when we use a unified USB interface, unification reduces costs and avoids possible errors. Specifically, there are several reasons for this:</p>
<ul>
<li>Ease of understanding and efficiency: service providers and consumers use a unified form, structure and usage, and a unified production-consumption protocol, thus reducing communication costs.</li>
<li>Expert experience: It contains best engineering practices with corresponding solutions for common scenarios, avoiding the need for everyone to rethink the entire API system.
For example, how do you handle API caching? How to perform authentication? How to handle data formatting?</li>
<li>Extensibility: extensibility require stable protocols, protocols are abstract and implementation-independent, and not everyone has them
The ability to design uncertainty-oriented systems, and some widely used technologies plan for a wider range of scenarios.</li>
</ul>
<p>




<img loading="lazy" src="/images/202304/image-20230430225520666.png" alt="why"  />


</p>
<p><small>image by alswl</small></p>
<p>While it is true that there are some costs associated with the use of a unified specification that requires framework understanding and promotion, I believe that in most scenarios
the benefits of a unified specification far outweigh these costs.</p>
<p>However, not all cases require consideration of the API specification. For short lifecycle projects, internal projects and products with a very small impact
specifications may not require much attention. In addition, in some special business scenarios, the
The underlying protocol may change, and the existing specification may no longer be applicable. But even so, I still recommend redrafting a new specification, rather than abandoning it.</p>
<h2 id="principles-of-rules">Principles of rules</h2>
<p>When developing API specifications, we should follow some basic principles to deal with technical differences, and I have summarized three principles that have gained wide acceptance:</p>
<ul>
<li>Simplicity: Simplicity is the most direct and effective strategy to resist complexity, using the principle of simplicity to reduce complexity and avoid the breeding and proliferation of complexity;</li>
<li>Consistency: uniform design patterns and continuity of design styles help reduce engineering costs and the psychological burden on engineers;</li>
<li>follow reality: follow the abstractions and layering of existing engineering domains (e.g. HTTP, REST, RBAC, OIDC, etc.) and do not invent new concepts of your own.
Always think about whether the problem is the only one you have encountered (the answer is definitely no).</li>
</ul>
<p>




<img loading="lazy" src="/images/202304/image-20230430225710666.png" alt="principle"  />


</p>
<p><small>image by alswl</small></p>
<h2 id="does-rest-work-or-not">Does REST work or not?</h2>
<p>The <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">RESTful API</a> has become a popular protocol in the Web API space.
Its broad applicability and reach stems from its binding to the HTTP protocol, which allows RESTful APIs to easily interact with existing Web technologies. If you are not familiar with REST, you can check out [Yifeng Ruan&rsquo;s
You can check out <a href="https://www.ruanyifeng.com/blog/2014/05/restful_api.html">Yifeng Ruan&rsquo;s RESTful API Design Guide</a> and
<a href="https://www.oschina.net/translate/best-practices-for-a-pragmatic-restful-api?print">Best Practices for RESTful API Design</a>.</p>
<p>REST is a high maturity protocol, which <a href="https://martinfowler.com/articles/richardsonMaturityModel.html#level0">Leonard Richardson</a>
describes it as having four levels of maturity:</p>
<p>




<img loading="lazy" src="/images/202304/rest-four-level.png" alt="rest-four-level"  />


</p>
<p><small>image by alswl</small></p>
<ol>
<li>The Swamp of POX, using HTTP to host the Legacy protocol (XML)</li>
<li>Resources: using resource abstraction</li>
<li>HTTP Verbs: using rich HTTP Verbs</li>
<li>Hypermedia Controls: API resource integration using <code>rel</code> links, <a href="https://jsonapi.org/">JSON:API</a> is the pinnacle of performance</li>
</ol>
<p>The core strength of REST is that</p>
<ul>
<li>It takes full advantage of the design of the HTTP Protocol (HTTP Protocol)</li>
<li>It has excellent identification of resources</li>
<li>It is designed with complete manipulation of resources (Manipulation of resources)</li>
<li>It has Self-descriptive messages</li>
<li>It supports multiple forms of presentation (hypermedia as the engine of application state)</li>
</ul>
<p>However, <mark>REST is not a specific protocol or specification, but a style philosophy</mark>. While REST defines rules and principles such as the identification of resources, unified interfaces, stateless communication, etc., it does not prescribe a specific protocol or specification.
it does not prescribe a specific way to implement them. As a result, in practice, different teams may have different understandings and practices, leading to inconsistencies and portability of the API.
This leads to inconsistency and reduced maintainability of the API.</p>
<p>In addition, REST has a number of limitations and drawbacks:</p>
<ul>
<li>Not all requests can be described by resources, such as the login (<code>/login</code>) operation, which is very convoluted when converted to <code>session</code>;
The same problem arises for operations like money transfers, where the limited number of HTTP verbs cannot support all business scenarios.</li>
<li>REST does not provide a clear solution to the inevitable problems such as paging, specific structure of the return body, error handling and authentication, etc.</li>
<li>For complex queries (such as Search Search), the query parameters of the RESTful API can become very complex and difficult to maintain.</li>
</ul>
<p>Therefore, although the REST style is a good guideline, the specific implementation needs to be combined with specific business requirements and technical features to make some trade-offs in order to achieve a good API design.
Finally, do we need a Web API design specification that follows the REST style? I think REST can solve 90% of the problems, but there is still 10% need to specify the details.</p>
<h2 id="web-api-specification-multiple-choice-questions">Web API specification multiple choice questions</h2>
<p>Since our protocol is based on HTTP and REST design, we will base our discussion on the four core parts of an HTTP request: URL, Header, Request and Response.
These are: URL, Header, Request and Response.</p>
<h3 id="url-best-practices">URL Best Practices</h3>
<p>My inspiration for URL design came from <a href="https://guides.rubyonrails.org/routing.html">Ruby on Rails</a>.
Before that, I always instinctively put model information on top of URLs, but in reality good URL design should be a plan for the information structure of the system.
Therefore, URL design should consider not only the API, but also the user-oriented Web URL.</p>
<p>To achieve good URL design, I have summarized the following rules:</p>
<ul>
<li>Locate resources (this answers the question of whether paging should be in the Header)</li>
<li>Self-explanatory (readable, the URL itself contains the core information)</li>
<li>Security (can not contain user authentication information, OAuth spent a lot of effort to understand this, anti-forgery)</li>
</ul>
<p>Typically, the URL model is as follows:</p>
<p><code>/$(prefix)/$(module)/$(model)/$(sub-model)/$(verb)?$(query)#${fragment}</code></p>
<p>where Prefix may be the version of the API, or it may be a special qualification, as some companies rely on for access layer triage;
Module is a business module, which can also be omitted; Model is a model; SubModel is a submodel, which can be omitted;
Verb is a verb, which can also be omitted; Query is a request parameter; Fragment is an HTTP primitive Fragment.</p>
<p>It is important to note that not all components are required to appear. For example, fields such as SubModel and Verb can
be allowed to be hidden in different URL styles.</p>
<p><strong>Design Style Options</strong></p>
<p>Note: <strong>Please note that there is no association between Scenario A / B / C and no association above or below each line</strong></p>
<table>
<thead>
<tr>
<th>Problem</th>
<th>Explanation (see separate analysis below)</th>
<th>Option A</th>
<th>Option B</th>
<th>Option C</th>
</tr>
</thead>
<tbody>
<tr>
<td>Dos API path&rsquo;s prefix</td>
<td></td>
<td><code>/apis</code></td>
<td><code>/api</code></td>
<td>second-level domain</td>
</tr>
<tr>
<td>Does the path contain the API version</td>
<td><strong>Version advantage in URLs</strong></td>
<td>✅</td>
<td>🚫</td>
<td></td>
</tr>
<tr>
<td>Does path contain a group</td>
<td></td>
<td>✅</td>
<td>🚫</td>
<td></td>
</tr>
<tr>
<td>Whether path contains action</td>
<td><strong>HTTP Verb is not enough</strong></td>
<td>✅</td>
<td>🚫 (pure REST)</td>
<td>Depends (include if HTTP Verb CRUD cannot be satisfied)</td>
</tr>
<tr>
<td>Model ID form</td>
<td><strong>Readable Stable Identity explained</strong></td>
<td>Self-incrementing ID</td>
<td>GUID</td>
<td><mark>Readable Stable ID</mark></td>
</tr>
<tr>
<td>Model singular or plural in URL</td>
<td></td>
<td>Singular</td>
<td>Plural</td>
<td>List Plural, One-Way Singular</td>
</tr>
<tr>
<td>Is the resource one-level (tiled) or multi-level (nested)</td>
<td><strong>Explanation of one-level and multi-level</strong></td>
<td>One-level (tiled)</td>
<td>Multi-level (nested)</td>
<td></td>
</tr>
<tr>
<td>How is search implemented, standalone API (<code>/models/search</code>) or list-based <code>/models/</code> API</td>
<td></td>
<td>standalone</td>
<td>list-based</td>
<td></td>
</tr>
<tr>
<td>Does it have an Alias URL</td>
<td><strong>Alias URL explanation</strong></td>
<td>✅</td>
<td>🚫</td>
<td></td>
</tr>
<tr>
<td>Does the model in the URL allow abbreviations (or refinements)</td>
<td><strong>Model abbreviations explained</strong></td>
<td>✅</td>
<td>🚫</td>
<td></td>
</tr>
<tr>
<td>Hyphenation of multiple words of the model in the URL</td>
<td></td>
<td><code>-</code></td>
<td><code>_</code></td>
<td>Camel</td>
</tr>
<tr>
<td>Whether to distinguish between Web API and Open API (non-browser oriented)</td>
<td></td>
<td>✅</td>
<td>🚫</td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>Version advantage in URLs</strong></p>
<p>We follow the principle of consistency when designing URLs; the same URL is used to access the same resource, regardless of identity or state.
This is also the basic principle of Uniform Resource Location. While we can accept different content formats (e.g. JSON / YAML / HTML / PDF / etc.)
but we want the location of the resource to be unique.</p>
<p>However, the question is, should the same resource be reflected in the URL for rendering between versions? This depends on whether the designer considers versioning to be in the realm of location information.</p>
<p>According to the RFC design, in addition to the URL there is <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Name">URN (Uniform Resource Name)</a>.
The latter is used to identify the resource, while the URL points to the resource address. In practice, URNs are not so widely used that URIs are almost equivalent to URLs.</p>
<p><strong>HTTP Verb is not enough</strong></p>
<p>In REST design, we need to operate on resources using HTTP verbs like GET / POST / PUT / DELETE / PATCH / HEAD.
For example, using the API <code>GET /apis/books</code> to view book listings is natural and reasonable.
However, when it comes to performing an action like &ldquo;borrow a book
we don&rsquo;t have a suitable verb (BORROW) to represent it. In this case, there are two possible options:</p>
<ol>
<li>use the POST method with a custom verb, such as <code>POST /apis/books/borrow</code>, for the action of borrowing a book;</li>
<li>creating a book borrow log, using a resource add method to structure the non-existent action, e.g. <code>POST /apis/books/borrow-log/</code>;</li>
</ol>
<p>This issue comes up a lot in complex scenarios such as user login (<code>POST /api/auth/login</code> vs <code>POST /api/session</code>) and account transfers (vs transfer record creation), etc.
<mark>API abstract or concrete, there is always an explanation of the business. </mark> We can&rsquo;t simply generalize all of our business to CRUD.
Rather, we need to divide the business wisely to make it clearer and more understandable to users.</p>
<p>When designing, we can consider whether we need to create a corresponding button for each API to make it easier for users to do so.
If there is only one API named <code>/api/do</code> and all the services are bound to it, although technically possible, this design does not meet the business requirements.
Each layer of abstraction is designed to standardize the solution to a particular problem, and the TCP L7 design is a reflection of this philosophy.</p>
<p><strong>Readable Stable Identity explained</strong></p>
<p>When marking a resource, we typically have several options:</p>
<ul>
<li>Use ID: IDs are usually bound to database self-incrementing IDs.</li>
<li>Use a GUID: such as a UUID, although less precise.</li>
<li>Use Readable Stable Identity: Usually identified by name, UID, or a specific ID such as a host name, IP address, or serial number.
This identifier is required to be stable and globally unique, which is useful in internal systems.</li>
</ul>
<p>I have a personal design tip: use a slug of the form <code>${type}/${type-id}</code> to describe an identifier.
For example <code>hostname/abc.sqa</code> or <code>ip/172.133.2.1</code>.
This design approach provides a good balance between readability and uniqueness.</p>
<blockquote>
<p>A slug is a human-readable, unique identifier, used to identify a resource instead of a less human-readable identifier like an id .</p>
</blockquote>
<p>from <a href="https://itnext.io/whats-a-slug-f7e74b6c23e0">What&rsquo;s a slug. and why would I use one? | by Dave Sag</a></p>
<p>PS: At the end of the article I&rsquo;ll also introduce an Apple Music solution that combines the ID / Readable / Stable features.</p>
<p><strong>Explanation of one-level and multi-level</strong></p>
<p>The hierarchical design of URLs can be based on modeling, or a straightforward single-level structure can be used. specific problem solving approach.
For example, when designing user-owned books, one can choose a multi-level structure <code>/api/users/foo/books</code> or a one-level structure <code>/api/books?owner=foo</code>.</p>
<p>Both options are technically possible, <mark>the former respecting the attribution of the model, and the latter focusing on the simplicity of the URL structure</mark>.</p>
<p>A multi-level structure is more intuitive, but also needs to address the issue of possible multiple ways of organization, such as books in a library organized by author or category?
In this case, consider making the attribution of models explicit in a multi-level structure
For example <code>/api/author/foo/books</code> (based on authors) or <code>/api/category/computer/books</code> (based on categories).</p>
<p><strong>Alias URL explanation</strong></p>
<p>For some frequently used URLs, although they can be designed according to URL rules, we can still design a more concise URL that
to facilitate user presentation and use. This design is especially common for Web URLs. For example, the API for a library&rsquo;s most popular books:</p>
<pre tabindex="0"><code># Original URL
https://test.com/apis/v3/books?sort=hot&amp;limit=10

# Alias URL
https://test.com/apis/v3/books/hot
</code></pre><p><strong>Model abbreviations explained</strong></p>
<p>Often, when modeling resources, longer names are used to name them, for example a book index might be named <code>BookIndex</code> instead of <code>Index</code>.
When rendering in URLs, since the URL prefix of <code>/book/book-index</code> contains Book, we can reduce the layer of description and
We can make the URL more concise, for example by using <code>/book/index</code>. This technique is very common in Web URL design.</p>
<p>There is also a strategy of model abbreviation, which provides a complete set of alias registration schemes. aliases that are globally unique.
For example, in Kubernetes, <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#deployment-v1-apps">Deployment</a>
is a common naming, while <code>apps/v1/Deployment</code> is the full name by adding a Group restriction.
There is also a shorthand for <code>deploy</code>. This mechanism relies on Kubernetes&rsquo; API Schema system for registration and work.</p>
<h3 id="header-best-practices">Header Best Practices</h3>
<p>We often overlook the importance of the Header. In fact, the selection of HTTP verbs, HTTP status codes, and various authentication logic (e.g., cookies / Basic Auth / Berear Token) all depend on the design of the Header.
In fact, the selection of HTTP verbs, HTTP status codes, and various identity verification logic (e.g., Cookie / Basic Auth / Berear Token) all depend on the design of the Header.</p>
<p><strong>Design style selection</strong></p>
<table>
<thead>
<tr>
<th>Problem</th>
<th>Explanation (see separate analysis below)</th>
<th>Option A</th>
<th>Option B</th>
<th>Option C</th>
</tr>
</thead>
<tbody>
<tr>
<td>Are all verbs using POST</td>
<td><strong>About only using POST</strong></td>
<td>✅</td>
<td>🚫</td>
<td></td>
</tr>
<tr>
<td>Is the Modify action POST or PATCH?</td>
<td></td>
<td>POST</td>
<td>PATCH</td>
<td></td>
</tr>
<tr>
<td>HTTP status return code</td>
<td><strong>2XX family</strong></td>
<td>Make full use of HTTP Status</td>
<td>Use only core status (200 404 302, etc.)</td>
<td>Use only 200</td>
</tr>
<tr>
<td>Is using rate limiter system</td>
<td></td>
<td>✅ 429</td>
<td>🚫</td>
<td></td>
</tr>
<tr>
<td>Is using cache system</td>
<td></td>
<td>✅  ETag / Last Modify</td>
<td>🚫</td>
<td></td>
</tr>
<tr>
<td>Is validate UserAgent</td>
<td></td>
<td>✅</td>
<td>🚫</td>
<td></td>
</tr>
<tr>
<td>Is validate  Referrral</td>
<td></td>
<td>✅</td>
<td>🚫</td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>About only using POST</strong></p>
<p>Some novices (or those who consider themselves experienced) may come to the erroneous conclusion that, with the exception of GET requests
all HTTP requests should use the POST method. Some even demand that <a href="https://www.zhihu.com/question/336797348">all actions (even read-only requests) should use the POST method</a>.
This argument is often supported on the grounds of &ldquo;simple consistency&rdquo;, &ldquo;cache avoidance&rdquo;, or &ldquo;operator requirements&rdquo;.</p>
<p>However, it is important to understand the original design of the HTTP method: it is used to describe the type of resource manipulation that gives rise to a number of issues including caching, security, and idempotency.
In relatively simple scenarios, omitting this layer of abstraction really doesn&rsquo;t pose much of a problem, but once you get into the complexities of the domain, the
Using this layer of abstraction for HTTP methods becomes very important. <mark>Whether this follows the standard or not will determine whether you get the benefits of standardization</mark>.
The analogy is like a new phone manufacturer that can choose not to use the USB TypeC interface.
It&rsquo;s technically possible, but it also loses a lot of standardization support and mental agreement.</p>
<p>I especially like one <a href="https://www.zhihu.com/people/huixiong-19">Knowing user</a>&rsquo;s
<a href="https://www.zhihu.com/question/336797348/answer/2198634068">comment</a>: &ldquo;<mark>Routing hasn&rsquo;t gone away, it&rsquo;s just shifted</mark>.</p>
<p><strong>2XX family</strong></p>
<p>The purpose of HTTP status codes is to indicate the result of communication between the client and the server. 2XX status code family means that the server has successfully received, understood, and processed the client request,
understood and processed the client request, and the response was successful. The following are common status codes in the 2XX family and their meanings:</p>
<ul>
<li>200 OK: The request was processed successfully and the server returned a response.</li>
<li>201 Created: The request has been successfully processed and a new resource has been created on the server.</li>
<li>202 Accepted: The request has been accepted by the server, but not yet executed. This status code is typically used for asynchronous processing.</li>
<li>204 No Content: The request was processed successfully, but the server did not return any response body content.</li>
</ul>
<p>The 2XX family of status codes indicates that the request has been successfully processed. These status codes let the client know explicitly that the request has been processed correctly so that it can proceed to the next step.</p>
<p>The need to use the 2XX family of status codes across the board depends on whether the client needs to be explicitly/displayed with information that
inform it of the next action. If it has been clearly described by other means (including documentation, verbal agreements)
then it is indeed possible to use 200 status codes across the board for return. But passing meaning based on behavior.
or document-based (or even verbal)? Is it more complex or more concise?</p>
<h3 id="request-best-practices">Request Best Practices</h3>
<p><strong>Design style selection</strong></p>
<table>
<thead>
<tr>
<th>Problem</th>
<th>Explanation (see separate analysis below)</th>
<th>Option A</th>
<th>Option B</th>
<th>Option C</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Whether complex parameters are put into Form Fields or a separate JSON Body</td>
<td></td>
<td>Form Fields</td>
<td>Body</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Whether the subresource is a one-time query or an independent query</td>
<td></td>
<td>one-time</td>
<td>independent</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Paging parameter storage</td>
<td></td>
<td>Header</td>
<td>URL Query</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Paging parameter method</td>
<td><strong>Explanation of paging method</strong></td>
<td>Page based</td>
<td>Offset based</td>
<td>Continuation token</td>
<td></td>
</tr>
<tr>
<td>Paging Controllers</td>
<td><strong>Paging controller explanation</strong></td>
<td>Client</td>
<td>Server</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>Explanation of paging methods</strong></p>
<p>The two most common types of paging we see are Page-based and Offset-based, which can be mapped by formula.
In addition, there exists a method called Continuation Token, which is similar in technique to Oracle&rsquo;s
<a href="https://stackoverflow.com/questions/241622/paging-with-oracle">rownum paging scheme</a>, using the parameter <code>start-from=? </code> to describe it.
While the advantages and disadvantages of Continuation Token are significant, using this approach allows sequential to be used as an alternative to random.</p>
<p><strong>Paging controls interpretation</strong>.</p>
<p>In some cases, we need to distinguish between Client Pagination and Server Pagniation.
Client Pagination means that the parameters of the next page are calculated by the client, while Server Pagination is a protocol such as <code>rel</code> or JSON.API returned by the server.
Using Server Pagniation avoids some problems, such as bulk blocking of some content, which may result in missing pages or white screens if client-side paging is used.</p>
<h3 id="response-best-practices">Response Best Practices</h3>
<p><strong>Design Style Selection</strong></p>
<table>
<thead>
<tr>
<th>Problem</th>
<th>Explanation (see separate analysis below)</th>
<th>Option A</th>
<th>Option B</th>
<th>Option C</th>
</tr>
</thead>
<tbody>
<tr>
<td>Model presentation types</td>
<td><strong>Several forms of models</strong></td>
<td>Single model</td>
<td>Multiple models</td>
<td></td>
</tr>
<tr>
<td>How large models contain sub-model models</td>
<td><strong>Linking, sidecar, and embedding of models</strong></td>
<td>Embedding</td>
<td>Core model + multiple linked resource queries</td>
<td>Linking</td>
</tr>
<tr>
<td>Whether field returns are on-demand or grouped or unified</td>
<td></td>
<td>unified</td>
<td>Use the <code>fields</code> field on demand</td>
<td></td>
</tr>
<tr>
<td>field presentation format</td>
<td></td>
<td>Snake</td>
<td>Camel</td>
<td></td>
</tr>
<tr>
<td>Error code</td>
<td></td>
<td>No customization, use Message</td>
<td>Custom</td>
<td></td>
</tr>
<tr>
<td>Error format</td>
<td></td>
<td>global uniform</td>
<td>on-demand</td>
<td></td>
</tr>
<tr>
<td>Time Zone</td>
<td></td>
<td>UTC</td>
<td>Local</td>
<td>Local + TZ</td>
</tr>
<tr>
<td>HATEOAS</td>
<td></td>
<td>✅</td>
<td>🚫</td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>Several forms of models</strong></p>
<p>In API design, there are several definitions for how models should be represented. Although this is not a topic that must be discussed in the API specification, it is very important for API design.</p>
<p>I have divided the model presentation that models are often described into the following categories, which are not professionally defined and borrow some definitions from the Java context below.
These names will be called differently in different companies and even different teams:</p>
<p>




<img loading="lazy" src="/images/202304/models.png" alt="models"  />


</p>
<p><small>image by alswl</small></p>
<ul>
<li>Business Object (BO): the original business model</li>
<li>Data Object (DO): the model stored to the RDBMS, so it must be a flat field structure, sometimes a BO will correspond to multiple DOs</li>
<li>View Object (VO): the model presented to the presentation layer, only keep the information the user needs to see, such as sensitive information will be removed</li>
<li>Data Transfer Object (DTO): the model used to transfer in the RPC system, generally not much different from the original Model, depending on the different serialization systems will have differences
(such as the handling of enumerations)</li>
</ul>
<p>In addition, two other categories are often used: Rich Model and Tiny Model (please ignore the naming, it varies a lot from team to team):</p>
<ul>
<li>Rich Model: This model is used to describe a rich model, which contains almost all the data needed and allows nesting of sub-resources.</li>
<li>Tiny Model: is a compact model, often used in the list API to be used</li>
</ul>
<p><strong>Linking, sidecar, and embedding of models</strong></p>
<p>In API design, we often need to deal with cases where a model contains multiple submodels, such as a Book containing Comments.
For this case, there are usually three representations to choose from: Link, Side, and Embed.</p>
<p>




<img loading="lazy" src="/images/202304/models-with-children.png" alt="models-with-children"  />


</p>
<p><small>image by alswl</small></p>
<p>Linking (sometimes this URL is also hidden, based on an implicit protocol between client and server for requests):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;data&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;朝花夕拾&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;relationships&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;comments&#34;</span><span class="p">:</span> <span class="s2">&#34;http://www.domain.com/book/42/comments&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;http://www.domain.com/author/鲁迅&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Sidecar:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;data&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;朝花夕拾&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;relationships&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;comments&#34;</span><span class="p">:</span> <span class="s2">&#34;http://www.domain.com/book/42/comments&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;authors&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;http://www.domain.com/author/鲁迅&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;includes&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comments&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">91</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="s2">&#34;匿名&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;content&#34;</span><span class="p">:</span> <span class="s2">&#34;非常棒&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;authors&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;鲁迅&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;鲁迅原名周树人&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Embedding:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;data&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;朝花夕拾&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comments&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">91</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="s2">&#34;匿名&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;content&#34;</span><span class="p">:</span> <span class="s2">&#34;非常棒&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;authors&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;鲁迅&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;鲁迅原名周树人&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="others">Others</h3>
<p>There are some other issues that are not converged in the four elements, but we often encounter them in engineering practice, and I will run them out:</p>
<p>**I&rsquo;m not in the HTTP protocol, what should I do? ** I&rsquo;m not in the HTTP protocol, what should I do?</p>
<p>Non-HTTP protocols are less commonly encountered in Web APIs, and the cost of creating a new set of protocols is too high. There are protocols that are introduced in certain areas.
For example, <a href="https://mqtt.org/">MQTT</a> in the IoT domain.</p>
<p>In addition, RPC is a wide-ranging concept that goes far beyond the protocol level.
Often we compare the transport protocols of HTTP and RPC, as well as serialization protocols.
I believe that much of the discussion in this paper is also of importance to the RPC community.</p>
<p>Some teams or individuals plan to use protocols that they create themselves, but my opinion is that self-built protocols should be avoided as much as possible, because it is very rare that there is a real need to create a protocol.
If a strong need does exist, then I would ask two questions: Have you read through the HTTP RFC document and the HTTP/2 RFC document?</p>
<p>**I&rsquo;m not a remote service (RPC / HTTP etc.), but what about the SDK? ** This article focuses on Web APIs (RPC/ HTTP etc.).</p>
<p>This article focuses on the design specifications of the Web API (HTTP) and some of the rules can be applied to RPC systems.
However, the basis of the discussion is based on Remote Service.
If you are an SDK developer, you will have two roles, possibly as a client communicating with a remote server, and as an SDK providing developer-oriented services.
You will also provide developer-facing interfaces as an SDK. For the latter, the following specifications can be used as a reference:</p>
<p>For the latter, you can refer to these specifications:</p>
<ul>
<li>Azure SDK Design Specifications <a href="https://azure.github.io/azure-sdk/general_design.html">General Guidelines: API Design | Azure SDKs</a></li>
<li>Posix API examples (e.g. File <a href="https://www.gnu.org/software/libc/manual/html_node/Low_002dLevel-I_002fO.html">Low-Level I/O (The GNU C Library)</a>)</li>
</ul>
<p><strong>Authentication Authentication Scheme</strong></p>
<p>In general, the Web API design will clearly describe the authentication and authentication system to be used.
It is important to distinguish between the concepts of &ldquo;authentication&rdquo; and &ldquo;authentication&rdquo;. The topic of &ldquo;authentication&rdquo; can be discussed in a separate section, so this paper will not cover this aspect.</p>
<p>In Web API design, common authentication methods include HTTP Basic Auth, OAuth2, and account password login.
In addition, HMac algorithm-based anti-replay and anti-tampering schemes are used for anti-tampering.</p>
<p><strong>Overlooked Topics</strong></p>
<p>In this discussion, I did not cover the following topics: asynchronous protocols (Web Sockets / Long Pulling / Round Trials), CORS, and security issues.
Although these topics are important, they will not be covered in this article.</p>
<p><strong>When to break the rules</strong></p>
<p>Some developers believe that rules are there to be broken. The reality is often so complex that it is difficult to discuss the details.
If a developer feels that a rule does not meet the actual need, there are two ways to handle it: change the rule or break it.
However, I prefer to discuss and update the rules, clarify where the specification is inadequate, and determine if there are special cases.
If a special case does need to be created, be sure to describe it in detail in the documentation, informing the successor and the consumer that it is a special case, explaining why the special case was created and how the special case responds.</p>
<h2 id="a-style-checklist">A style Checklist</h2>
<h3 id="github-style">Github style</h3>
<p>Github&rsquo;s API is one that I often refer to. It models its business domain very clearly, provides thorough documentation, and makes communication much less costly.
I mainly refer to the following two links:
API Definition <a href="https://docs.github.com/en/rest?apiVersion=2022-11-28">GitHub REST API documentation</a> and
a list of application-oriented APIs [Endpoints available for GitHub Apps](<a href="https://docs.github.com/en/rest/overview/endpoints-available-for-github-apps">https://docs.github.com/en/rest/overview/endpoints-available-for-github-apps</a>? apiVersion=2022-11-28)
This list includes almost all of Github&rsquo;s APIs.</p>
<table>
<thead>
<tr>
<th>Problem</th>
<th>Choice</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>URL</strong></td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>Dos API path&rsquo;s prefix</td>
<td>second-level domain</td>
<td><a href="https://api.github.com">https://api.github.com</a></td>
</tr>
<tr>
<td>Does the path contain the API version</td>
<td>🚫</td>
<td>Header <code>X-GitHub-Api-Version</code> <a href="https://docs.github.com/en/rest/overview/api-versions?apiVersion=2022-11-28">API Versions</a></td>
</tr>
<tr>
<td>Does path contain a group</td>
<td>🚫</td>
<td> </td>
</tr>
<tr>
<td>Whether path contains action</td>
<td>Depends (include if HTTP Verb CRUD cannot be satisfied)</td>
<td>sample: /repos/{owner}/{repo}/pulls/{pull_number}/merge POST /repos/{owner}/{repo}/releases/generate-notes</td>
</tr>
<tr>
<td>Model ID form</td>
<td>Readable Stable Identity</td>
<td> </td>
</tr>
<tr>
<td>Model singular or plural in URL</td>
<td>Plural</td>
<td> </td>
</tr>
<tr>
<td>Is the resource one-level (tiled) or multi-level (nested)</td>
<td>multi-level</td>
<td> </td>
</tr>
<tr>
<td>How is search implemented, standalone API (/models/search) or list-based /models/ API</td>
<td>standalone</td>
<td> </td>
</tr>
<tr>
<td>Does it have an Alias URL</td>
<td>?</td>
<td> </td>
</tr>
<tr>
<td>Does the model in the URL allow abbreviations (or refinements)</td>
<td>🚫</td>
<td>No obvious information is seen, and it is not required based on the multilevel model, but it exists GET /orgs/{org}/actions/required_workflows</td>
</tr>
<tr>
<td>Hyphenation of multiple words of the model in the URL</td>
<td>- and _</td>
<td>GET /repos/{owner}/{repo}/git/matching-refs/{ref} vs GET /orgs/{org}/actions/required_workflows</td>
</tr>
<tr>
<td>Whether to distinguish between Web API and Open API (non-browser oriented)</td>
<td>🚫</td>
<td> </td>
</tr>
<tr>
<td><strong>Header</strong></td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>Are all verbs using POST           </td>
<td>🚫</td>
<td> </td>
</tr>
<tr>
<td>Is the Modify action POST or PATCH?</td>
<td>PATCH</td>
<td> </td>
</tr>
<tr>
<td>HTTP status return code            </td>
<td>Leverage HTTP Status</td>
<td>Commonly used, including rate limiter</td>
</tr>
<tr>
<td>Is using rate limiter system       </td>
<td>✅ 429</td>
<td> </td>
</tr>
<tr>
<td>Is using cache system              </td>
<td>✅ ETag / Last Modify</td>
<td><a href="https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#client-errors">Resources in the REST API#client-errors</a></td>
</tr>
<tr>
<td>Is validate UserAgent              </td>
<td>✅</td>
<td> </td>
</tr>
<tr>
<td>Is validate  Referrral             </td>
<td>🚫</td>
<td> </td>
</tr>
<tr>
<td><strong>Request</strong></td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>Whether complex parameters are put into Form Fields or a separate JSON Body</td>
<td>Body</td>
<td>for example, <a href="https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#create-a-pull-request">Pulls#create-a-pull-request</a></td>
</tr>
<tr>
<td>Whether the subresource is a one-time query or an independent query        </td>
<td>one-time</td>
<td>Judging from Pulls</td>
</tr>
<tr>
<td>Paging parameter storage                                                   </td>
<td>URL Query</td>
<td> </td>
</tr>
<tr>
<td>Whether complex parameters are put into Form Fields or a separate JSON Body</td>
<td>Page</td>
<td><a href="https://docs.github.com/en/rest/guides/using-pagination-in-the-rest-api?apiVersion=2022-11-28">Using pagination in the REST API</a></td>
</tr>
<tr>
<td>Whether the subresource is a one-time query or an independent query        </td>
<td>Server</td>
<td><a href="https://docs.github.com/en/rest/guides/using-pagination-in-the-rest-api?apiVersion=2022-11-28">Using pagination in the REST API</a></td>
</tr>
<tr>
<td><strong>Response</strong></td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>Model presentation types                                 </td>
<td>Multi</td>
<td>For example, the details in Commits and Parent <a href="https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28">Commits</a></td>
</tr>
<tr>
<td>How large models contain sub-model models                </td>
<td>Core Model + Multiple Linked Resource Queries</td>
<td>Not explicitly stated, inferred from several core APIs</td>
</tr>
<tr>
<td>Whether field returns are on-demand or grouped or unified</td>
<td>Unified</td>
<td> </td>
</tr>
<tr>
<td>field presentation format                                </td>
<td>Snake</td>
<td> </td>
</tr>
<tr>
<td>Error code                                               </td>
<td>None</td>
<td><a href="https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#client-errors">Resources in the REST API#client-errors</a></td>
</tr>
<tr>
<td>Error format                                             </td>
<td>Global Harmonization</td>
<td><a href="https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#client-errors">Resources in the REST API#client-errors</a></td>
</tr>
<tr>
<td>Time Zone                                                </td>
<td>Multi（ISO 8601 &gt; Time-Zone Header &gt; User Last &gt; UTC）</td>
<td><a href="https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#timezones">Resources in the REST API#Timezones</a></td>
</tr>
</tbody>
</table>
<h3 id="azure-style">Azure style</h3>
<p>Azure&rsquo;s API design follows [api-guidelines/Guidelines.md at master - microsoft/api-guidelines](<a href="https://github.com/Microsoft/api-guidelines/blob/">https://github.com/Microsoft/api-guidelines/blob/</a> master/Guidelines.md).
This article is schematic, and there is also a practical guide at [Best practices in cloud applications](<a href="https://learn.microsoft.com/en-us/azure/architecture/best-practices/index">https://learn.microsoft.com/en-us/azure/architecture/best-practices/index</a> -best-practices)
and <a href="https://learn.microsoft.com/en-us/azure/architecture/best-practices/api-design">Web API design best practices</a>.</p>
<p>Note that Azure&rsquo;s product line is much richer than Github, and some APIs do not follow Azure&rsquo;s own specifications.
When looking for examples, I mainly refer to
<a href="https://learn.microsoft.com/en-us/rest/api/?view=Azure">REST API Browser</a>, the
<a href="https://learn.microsoft.com/en-us/rest/api/storageservices/">Azure Storage REST API Reference</a>.
If the specific implementation conflicts with the Guidelines.md, I will use the Guidelines.md conclusion.</p>
<table>
<thead>
<tr>
<th>Problem</th>
<th>Choice</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>URL</strong></td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>Dos API path&rsquo;s prefix</td>
<td>Second level domain</td>
<td> </td>
</tr>
<tr>
<td>Does the path contain the API version</td>
<td>🚫</td>
<td>x-ms-version</td>
</tr>
<tr>
<td>Does path contain a group</td>
<td>✅</td>
<td> </td>
</tr>
<tr>
<td>Whether path contains action</td>
<td>🚫？</td>
<td>Not explicitly stated, but there is a tendency to use the comp parameter for actions that keep the URL RESTful Reference Lease Container (REST API) - Azure Storage</td>
</tr>
<tr>
<td>Model ID form</td>
<td>Readable Stable Identity</td>
<td><a href="https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#73-canonical-identifier">Guidelines.md#73-canonical-identifier</a></td>
</tr>
<tr>
<td>Model singular or plural in URL</td>
<td>Plural</td>
<td><a href="https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#93-collection-url-patterns">Guidelines.md#93-collection-url-patterns</a></td>
</tr>
<tr>
<td>Is the resource one-level (tiled) or multi-level (nested)</td>
<td>one-level (tiled) / multi-level (nested)</td>
<td><a href="https://learn.microsoft.com/en-us/azure/architecture/best-practices/api-design#define-api-operations-in-terms-of-http-methods">api-design#define-api-operations-in-terms-of-http-methods</a>, note MS has comp=? parameter, which is used to handle special commands</td>
</tr>
<tr>
<td>How is search implemented, standalone API (/models/search) or list-based /models/ API</td>
<td>?</td>
<td>Tends to be list-based because of the heavy use of comp= this URL Param for subcommands such as <a href="https://learn.microsoft.com/en-us/rest/api/storageservices/incremental-copy-blob">Incremental Copy Blob (REST API) - Azure Storage</a></td>
</tr>
<tr>
<td>Does it have an Alias URL</td>
<td>?</td>
<td> </td>
</tr>
<tr>
<td>Does the model in the URL allow abbreviations (or refinements)</td>
<td>?</td>
<td> </td>
</tr>
<tr>
<td>Hyphenation of multiple words of the model in the URL</td>
<td>Camel</td>
<td><a href="https://learn.microsoft.com/en-us/rest/api/storagemover/job-runs/list?tabs=HTTP">Job Runs - List - REST API (Azure Storage Mover)</a></td>
</tr>
<tr>
<td>Whether to distinguish between Web API and Open API (non-browser oriented)</td>
<td>🚫</td>
<td> </td>
</tr>
<tr>
<td><strong>Header</strong></td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>Are all verbs using POST           </td>
<td>🚫</td>
<td> </td>
</tr>
<tr>
<td>Is the Modify action POST or PATCH?</td>
<td>PATCH</td>
<td><a href="https://learn.microsoft.com/en-us/rest/api/storagemover/agents/update?tabs=HTTP">Agents - Update - REST API (Azure Storage Mover)</a></td>
</tr>
<tr>
<td>HTTP status return code            </td>
<td>Leverage HTTP Status</td>
<td><a href="https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#711-http-status-codes">Guidelines.md#711-http-status-codes</a></td>
</tr>
<tr>
<td>Is using rate limiter system       </td>
<td>?</td>
<td> </td>
</tr>
<tr>
<td>Is using cache system              </td>
<td>✅</td>
<td><a href="https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#75-standard-request-headers">Guidelines.md#75-standard-request-headers</a></td>
</tr>
<tr>
<td>Is validate UserAgent              </td>
<td>🚫</td>
<td> </td>
</tr>
<tr>
<td>Is validate  Referrral             </td>
<td>🚫</td>
<td> </td>
</tr>
<tr>
<td><strong>Request</strong></td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>Whether complex parameters are put into Form Fields or a separate JSON Body</td>
<td>Body</td>
<td>Reference Agents - Create Or Update - REST API (Azure Storage Mover)</td>
</tr>
<tr>
<td>Whether the subresource is a one-time query or an independent query        </td>
<td>?</td>
<td> </td>
</tr>
<tr>
<td>Paging parameter storage                                                   </td>
<td>?</td>
<td>No conclusion</td>
</tr>
<tr>
<td>Whether complex parameters are put into Form Fields or a separate JSON Body</td>
<td>Page based</td>
<td> </td>
</tr>
<tr>
<td>Whether the subresource is a one-time query or an independent query        </td>
<td>Server</td>
<td><a href="https://learn.microsoft.com/en-us/rest/api/storagemover/agents/create-or-update?tabs=HTTP">Agents - Create Or Update - REST API (Azure Storage Mover)</a></td>
</tr>
<tr>
<td><strong>Response</strong></td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>Model presentation types                                 </td>
<td>Sginle</td>
<td>Speculation</td>
</tr>
<tr>
<td>How large models contain sub-model models                </td>
<td>?</td>
<td>Overly complex scenarios with no single conclusion</td>
</tr>
<tr>
<td>Whether field returns are on-demand or grouped or unified</td>
<td>?</td>
<td> </td>
</tr>
<tr>
<td>field presentation format                                </td>
<td>Camel</td>
<td> </td>
</tr>
<tr>
<td>Error code                                               </td>
<td>Use the list of custom error codes</td>
<td>At least within their respective products</td>
</tr>
<tr>
<td>Error format                                             </td>
<td>Customization</td>
<td> </td>
</tr>
<tr>
<td>Time Zone                                                </td>
<td>?</td>
<td> </td>
</tr>
<tr>
<td>HATEOAS</td>
<td>?</td>
<td><a href="https://learn.microsoft.com/en-us/azure/architecture/best-practices/api-design#use-hateoas-to-enable-navigation-to-related-resources">api-design#use-hateoas-to-enable-navigation-to-related-resources</a></td>
</tr>
</tbody>
</table>
<p>The overall design style of Azure is more complex than the Github API, and there are multiple versions of the same product, making it a little less uniform.
It looks a little less uniform. It is also more difficult to have a single specification that binds all teams in this complex scenario.
We can see that the Azaure team is working on the Guidelines, and they are recently launching the vNext specification.</p>
<h3 id="my-personal-style">My personal style</h3>
<p>My personal style is basically inherited from the Github API style, with some minor adjustments to make it more suitable for small and medium-sized product development.
The reasons for my changes are explained in the notes, and the starting point for changes is: simplify / reduce ambiguity / consider the actual cost. If &ldquo;Note&rdquo; is marked in the notes, it follows the Github scheme and adds some ideas.</p>
<table>
<thead>
<tr>
<th>Problem</th>
<th>Choice</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>URL</strong></td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>Dos API path&rsquo;s prefix</td>
<td>/apis</td>
<td>We often have only one system, one domain name to host the API and Web Page</td>
</tr>
<tr>
<td>Does the path contain the API version</td>
<td>✅</td>
<td> </td>
</tr>
<tr>
<td>Does path contain a group</td>
<td>✅</td>
<td>Do a layer of business module split to isolate certain cooperation boundaries</td>
</tr>
<tr>
<td>Whether path contains action</td>
<td>Depends (include if HTTP Verb CRUD cannot be satisfied)</td>
<td> </td>
</tr>
<tr>
<td>Model ID form</td>
<td>Readable Stable Identity</td>
<td> </td>
</tr>
<tr>
<td>Model singular or plural in URL</td>
<td>Plural</td>
<td> </td>
</tr>
<tr>
<td>Is the resource one-level (tiled) or multi-level (nested)</td>
<td>Multi-level + One-level</td>
<td>Note: 80% of cases follow the model attribution, a few cases (commonly in search) use the first level</td>
</tr>
<tr>
<td>How is search implemented, standalone API (/models/search) or list-based /models/ API</td>
<td>Uniform &gt; Standalone</td>
<td>Low-cost implementation of some (early Github issues were also without /search interface)</td>
</tr>
<tr>
<td>Does it have an Alias URL</td>
<td>🚫</td>
<td>Keep it simple.</td>
</tr>
<tr>
<td>Does the model in the URL allow abbreviations (or refinements)</td>
<td>✅</td>
<td>Once the streamlining is done, it needs to be marked in the glossary</td>
</tr>
<tr>
<td>Hyphenation of multiple words of the model in the URL</td>
<td>-</td>
<td> </td>
</tr>
<tr>
<td>Whether to distinguish between Web API and Open API (non-browser oriented)</td>
<td>🚫</td>
<td> </td>
</tr>
<tr>
<td><strong>Header</strong></td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>Are all verbs using POST           </td>
<td>🚫</td>
<td> </td>
</tr>
<tr>
<td>Is the Modify action POST or PATCH?</td>
<td>PATCH</td>
<td> </td>
</tr>
<tr>
<td>HTTP status return code            </td>
<td>Leverage HTTP Status</td>
<td> </td>
</tr>
<tr>
<td>Is using rate limiter system       </td>
<td>✅ 429</td>
<td> </td>
</tr>
<tr>
<td>Is using cache system              </td>
<td>🚫</td>
<td>Keep it simple, use dynamic data, remove caching capabilities</td>
</tr>
<tr>
<td>Is validate UserAgent              </td>
<td>✅</td>
<td> </td>
</tr>
<tr>
<td>Is validate  Referrral             </td>
<td>🚫</td>
<td> </td>
</tr>
<tr>
<td><strong>Request</strong></td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>Whether complex parameters are put into Form Fields or a separate JSON Body</td>
<td>Body</td>
<td> </td>
</tr>
<tr>
<td>Whether the subresource is a one-time query or an independent query        </td>
<td>one-time</td>
<td> </td>
</tr>
<tr>
<td>Paging parameter storage                                                   </td>
<td>URL Query</td>
<td> </td>
</tr>
<tr>
<td>Whether complex parameters are put into Form Fields or a separate JSON Body</td>
<td>Page</td>
<td> </td>
</tr>
<tr>
<td>Whether the subresource is a one-time query or an independent query        </td>
<td>Client</td>
<td>Reduce server-side costs and tolerate extreme case gaps</td>
</tr>
<tr>
<td><strong>Response</strong></td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>Model presentation types                                 </td>
<td>Multi</td>
<td>BO / VO / Tiny / Rich</td>
</tr>
<tr>
<td>How large models contain sub-model models                </td>
<td>Core Model + Multiple Linked Resource Queries</td>
<td> </td>
</tr>
<tr>
<td>Whether field returns are on-demand or grouped or unified</td>
<td>Unified</td>
<td>Tiny Model (optional) / Model (default) / Rich Model (optional)</td>
</tr>
<tr>
<td>field presentation format                                </td>
<td>Snake</td>
<td> </td>
</tr>
<tr>
<td>Error code                                               </td>
<td>None</td>
<td>Note: Many scenarios require only message</td>
</tr>
<tr>
<td>Error format                                             </td>
<td>Uniform</td>
<td> </td>
</tr>
<tr>
<td>Time Zone                                                </td>
<td>ISO 8601</td>
<td>Use only one format, no longer support multiple options</td>
</tr>
<tr>
<td>HATEOAS</td>
<td>🚫</td>
<td> </td>
</tr>
</tbody>
</table>
<h2 id="off-topic---an-interesting-design-for-apple-music">Off-Topic - An Interesting Design for Apple Music</h2>
<p>




<img loading="lazy" src="/images/202304/apple-music.png" alt="Apple Music"  />


</p>
<p><small>image from Apple Music</small></p>
<p>I was recently using Apple Music and noticed the URL structure of its web page:</p>
<p><code>/cn/album/we-sing-we-dance-we-steal-things/277635758?l=en</code></p>
<p>Looking closely at this URL structure, I can see that the Path contains human-readable slug in three parts: <code>alumn/$(name)/$(id)</code> (which contains the ID).
A question immediately occurred to me: are the intermediate readable names machine-sensitive and purely geared towards natural humans?
So I tested a fabricated address: <code>/cn/album/foobar/277635758?l=en</code>.
Can you guess if the result is accessible before you try to access it?</p>
<p>This design paradigm is a bit more complex than my current common URL design specification. My specification requires that the resource locale be organized using a two-level slug, <code>$(type)/$(id)</code>.
Whereas Apple uses <code>$(type)/(type-id)/$(id)</code>, taking care of both readability and accuracy.</p>
<h2 id="off-topic---why-graphql-doesnt-work">Off-Topic - Why GraphQL Doesn&rsquo;t Work</h2>
<p><a href="https://graphql.org/">GraphQL</a> is a way to request APIs by using a custom query language, which has the advantage of providing a more flexible way to fetch data.
Compared to RESTful APIs that require a single request for all the data needed, GraphQL allows the client to explicitly specify the data needed, thus reducing unnecessary data transfer and processing.</p>
<p>However, GraphQL&rsquo;s over-flexibility is also one of its drawbacks. Since it does not have some specifications for modeling business scenarios like the REST API, developers need to think about data processing themselves.
developers need to think about how to handle the data themselves.
This can lead to unreasonable query requests that can put excessive pressure on the back-end database. In addition, GraphQL has relatively few implementations and documentation, which also requires more learning costs.</p>
<p>Therefore, while GraphQL can provide better results in some specific scenarios, it is not suitable for all API design needs.
In fact, some companies have even chosen to drop support for GraphQL, such as Github&rsquo;s <a href="https://github.blog/changelog/2022-08-18-deprecation-notice-graphql-for-packages/">some projects</a>.</p>
<h2 id="last">Last</h2>
<blockquote>
<p>Complexity is incremental</p>
<ul>
<li>John Ousterhout (<a href="https://web.stanford.edu/~ouster/cgi-bin/cs190-winter18/lecture.php?topic=complexity">via</a>）</li>
</ul>
</blockquote>
<p><mark>There is no best style, only the best fit, but it is important to have style. &lt;/mark</p>
<p>Building a good rule requires not only a deep understanding of existing mechanisms, but also a thorough grasp of the business domain, and effective collaboration and communication within the team to promote and implement the rule.
Once established, however, rules can effectively reduce the complexity of the system, avoiding increasing complexity over time and as the business progresses, and reducing communication costs on the R&amp;D side.</p>
<p>It&rsquo;s a long-term investment, but one that will pay off in the long run. I hope those with a long-term view will take note of this article.</p>
<p>Key reference documents:</p>
<ul>
<li>[api-guidelines/Guidelines.md at master - microsoft/api-guidelines](<a href="https://github.com/Microsoft/api-guidelines/blob/master/">https://github.com/Microsoft/api-guidelines/blob/master/</a> Guidelines.md)</li>
<li><a href="https://docs.github.com/en/rest/overview/about-githubs-apis?apiVersion=2022-11-28">GitHub&rsquo;s APIs</a></li>
<li>[Web API design best practices - Azure Architecture Center | Microsoft Learn](<a href="https://learn.microsoft.com/en-us/azure/architecture/best-">https://learn.microsoft.com/en-us/azure/architecture/best-</a> practices/api-design)</li>
<li><a href="https://developer.aliyun.com/article/701810">Reflections on API Design Best Practices - Valley Park</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>From Toodledo To Obsidian Tasks - my GTD best practices</title>
      <link>https://en.blog.alswl.com/2023/02/gtd/</link>
      <pubDate>Sun, 26 Feb 2023 18:50:50 +0800</pubDate>
      
      <guid>https://en.blog.alswl.com/2023/02/gtd/</guid>
      <description>I recently completed the switch from Toodledo to Obsidian Tasks (an Obsidian plugin), both of which are extremely powerful time management tools. Although Toodledo was almost my favorite GTD software, the increasingly unstable service has been bothering me. Coincidentally, Obsidian Tasks&amp;rsquo; ability to combine querying and knowledge base has produced a 1+1&amp;gt;2 effect. After trying it out, I decided to migrate to Obsidian Tasks.
Giving up an old friend like Toodledo, which I have been working with for more than a decade, made me feel a little sad, but the process also prompted me to summarize my attempts at time management and share some of my experiences.</description>
      <content:encoded><![CDATA[<p>I recently completed the switch from Toodledo to Obsidian Tasks (an Obsidian plugin), both of which are extremely
powerful time management tools. Although Toodledo was almost my favorite GTD software, the increasingly unstable service
has been bothering me. Coincidentally, Obsidian Tasks&rsquo; ability to combine querying and knowledge base has produced a
1+1&gt;2 effect. After trying it out, I decided to migrate to Obsidian Tasks.</p>
<p>Giving up an old friend like Toodledo, which I have been working with for more than a decade, made me feel a little sad,
but the process also prompted me to summarize my attempts at time management and share some of my experiences.</p>
<p>




<img loading="lazy" src="/images/202302/clock.png" alt="time"  />


</p>
<p><small>Image frrom Pixelbay</small></p>
<h2 id="what-is-gtd">What is GTD?</h2>
<p>In this fast-paced modern life, we all encounter a large amount of tasks and information, and how to effectively manage
time and tasks has become a challenge for many people. During my school days, I also struggled with task management.
Starting from 2009, I tried to use tools such as [calendars](<a href="https://blog.alswl.com/2010/01/use-google-calendar-to-">https://blog.alswl.com/2010/01/use-google-calendar-to-</a>
manage-the-time/) and <a href="https://blog.alswl.com/2010/04/desktop-recording-tool-boogunote/">notes</a> to organize my tasks and
information, but the effect was not ideal. It wasn&rsquo;t until later that I came across <a href="https://doit.im/">DoIt.im</a> and
discovered David Allen&rsquo;s book, &ldquo;Getting Things Done&rdquo;, which brought me a new approach to task management - GTD. For
decades since then, I have been using this method to manage my time.</p>
<p>GTD is a personal time management method created by David Allen, aimed at helping people manage their time and tasks
more effectively, thereby improving work efficiency and productivity. The basic idea of this method is <mark>to break
down all tasks into specific actionable steps and organize them in a reliable system for follow-up and management&lt;/
mark&gt;. Through this method, people can more easily take control of their work and life, reduce stress and anxiety, and
thus complete tasks more efficiently with greater focus.</p>
<p>So how do we implement GTD? Here are the basic steps:</p>
<ol>
<li>Collect: Collect all tasks, ideas, plans, and to-do items, using various tools such as notebooks, mobile phones, and computers.</li>
<li>Organize: Review the to-do tasks, classify all tasks and actionable steps, and review past unfinished projects.
<ul>
<li>Categorize: Review the collected tasks and categorize all tasks and actionable steps, commonly including projects, contexts, and time, to better understand the priority and relevance of the tasks. If the task can be completed quickly (&lt;2m), do it immediately.</li>
<li>Review: Regularly review the tasks and actionable steps to ensure their progress and status are promptly followed up, to better control tasks and life, and thus complete tasks more efficiently.</li>
</ul>
</li>
<li>Execute: Focus on the current task, avoid distractions, and use time management and attention control techniques to improve efficiency.</li>
</ol>
<p>




<img loading="lazy" src="/images/202302/gtd-en.png" alt="gtd"  />


</p>
<p>Note: There may be slight differences in structure and external tools I organized. <mark>I merged categorizing and
reviewing into the organizing step</mark> because I found that organizing is essentially planning, and planning involves
reviewing the collected to-do items as well as ongoing and completed projects. Why not do them together in the
organizing step?</p>
<h2 id="online-gtd-services-i-have-used">Online GTD Services I Have Used</h2>
<p>I have used several online task management software, including Doit.im, Remember The Milk, OmniFocus and Toodledo. Below is my usage history and comparison of these software.</p>
<h3 id="doitim">Doit.im</h3>
<p>I started with <a href="http://doit.im/">Doit.im</a> when I first got into GTD. It is a domestic software that I really like. Doit.im supports basic GTD functions, provides clear task lists, classification, priority and other functions, as well as multiple review modes and multi-platform synchronization. However, I later gave it up because I found the more powerful Toodledo.</p>
<p>




<img loading="lazy" src="/images/202302/doit-im.png" alt="doit.im"  />


</p>
<p><small>Image from doit.im</small></p>
<h3 id="remember-the-milk">Remember The Milk</h3>
<p>When looking for the next management tool to use after Doit.im, I found <a href="http://www.rememberthemilk.com/">Remember The Milk</a> (RTM). RTM provides basic task management functions such as adding tasks, setting reminders and archiving tasks etc., and supports multi-platform synchronization so you can use it on multiple devices such as computers or phones.</p>
<p>However some people may not like RTM&rsquo;s user interface design because it looks outdated compared to modern designs. In addition some advanced features require payment which was difficult for me at the time since I was still a poor student so I quickly stopped using RTM.</p>
<h3 id="toodledo">Toodledo</h3>
<p>I learned about <a href="https://www.toodledo.com/">Toodledo</a> from <a href="https://xbeta.info/gtd-toodledo.htm">xbeta.info/gtd-toodledo.htm</a> (a famous website where users share their experiences with different softwares).</p>
<p>




<img loading="lazy" src="/images/202302/toodledo.png" alt="toodledo"  />


</p>
<p><small>Image from toodeldo.com</small></p>
<p>Soon after that on <a href="(http://www.productivelife.cn/)">Productive Life</a> ,  I found a very complete tutorial introducing advanced techniques in using Toodeldo especially how to use its Search module effectively . Unfortunately this website cannot be accessed anymore but we can get an idea of what Toodleo looked like back then through screenshots taken from other sources:</p>
<p>




<img loading="lazy" src="/images/202302/productive-life.png" alt="productive-life"  />


</p>
<p><small>Image frrom twitter.com/productivelife</small></p>
<p>Toodleodo quickly became my favorite task management tool due to its comprehensive functionality supporting task classification sorting filtering etc., while also providing various review modes and custom fields. Additionally,Todoedo supports multi-platform synchronization along with a powerful API making integration with other applications easy.</p>
<h3 id="omnifocus">OmniFocus</h3>
<p>Since Todoedo had slow access speeds without much improvement in product functionality over time,I briefly explored using<a href="(https://www.omnigroup.com/omnifocus/)">OmniFocus</a>, which is a professional Mac platform task management tool offering features such as project decomposition context etc.,and can be extended via AppleScript among others.OmniFocus supports multiple sync services including Omni Sync Server WebDAV FTP etc., allowing users to choose different services according to their needs.All data are stored locally so users can continue using the software even without internet connection.</p>
<p>After paying for it for some time,I realized <mark>that OmniFocu&rsquo;s search function could not compare with Todoedo&rsquo;s Search function </mark>,so it couldn&rsquo;t meet my needs.</p>
<p>




<img loading="lazy" src="/images/202302/omnifocus.png" alt="OmniFocus"  />


</p>
<p><small>Image frrom <a href="https://www.omnigroup.com/Omnifocus">www.omnigroup.com/Omnifocus</a></small></p>
<h3 id="other-tools-tried-out">Other Tools Tried Out</h3>
<p>I have also tried out some other tools including Trello Asana Basement Tower Teambition etc.,
but since they were designed mainly for team collaboration rather than personal use,it wasn&rsquo;t convenient enough for me.Additionally,the customized search feature of these softwares (at that time) was often weak unable to meet my requirements.In the end,I returned back into the arms of Todoedo until now.</p>
<h2 id="how-do-i-organize-my-daily-tasks">How do I organize my daily tasks?</h2>
<p>I think in the GTD system, the collection and processing stages are relatively mechanical and simple. The real test for
people is the <strong>organization</strong> stage:</p>
<ul>
<li>Classification: how to quickly review all tasks and classify them;</li>
<li>Next step: how to determine the priority of the next task.</li>
</ul>
<p>Below, I will share some of my personal concepts and operational methods.</p>
<h3 id="classification-means-quick-review">Classification means quick review</h3>
<p>In order to better organize tasks, we need to pay attention to important attributes of tasks, including <mark>Context (environment), Project, Status, and Due</mark>. Context determines what needs to be done in the current environment and serves as a simple filter. I divide Context into Computer/Work/Mobile. Project assigns tasks to different projects with longer cycles and strong relevance among its tasks. Status describes whether a task can be processed immediately (Next) or requires waiting (Waiting). Some recurring tasks are labeled Active. Due describes time-related attributes such as On-time delivery (On), before this time (Due), or optional completion if possible.</p>
<p>Other attributes such as Priority and Folder type also need consideration but are not most important.</p>
<p>To better manage my daily workloads, every morning I open <mark>four views: single view, subtask view, project-xxx view,and inbox view.</mark></p>
<ul>
<li><strong>Single View</strong> contains individual independent tasks that can be sorted by priority.</li>
<li><strong>Subtask View</strong> shows parent-child relationships between larger goals broken down into smaller achievable steps.</li>
<li><strong>Project-x View</strong> categorizes specific projects according to fixed templates consisting of several dozen related subtasks.</li>
<li><strong>Inbox View</strong> is where newly collected items go through initial classification process.</li>
</ul>
<h3 id="whats-next">What&rsquo;s next?</h3>
<p>The following filtering list helps identify which immediate actions should take place:</p>
<ul>
<li><strong>Top</strong>: High-priority task</li>
<li>Tasks due within three days that aren&rsquo;t recurring types require checking &amp; preparation</li>
<li>Tasks due tomorrow require immediate action</li>
<li>High + Next: high-priority task with actionable conditions already met</li>
<li>Timer isn&rsquo;t empty indicating it has started but may have been interrupted by other events</li>
<li>Waiting indicates cooperation needed from others; progress check required</li>
</ul>
<p>




<img loading="lazy" src="/images/202302/now.png" alt="toodledo-now"  />


</p>
<p>Tasks on this list are ranked based on their overall priority level combined with deadline dates &amp; execution status considerations. Every time you enter work mode after reviewing your lists above just select top few items from this filtered list for execution.</p>
<h2 id="former-king---toodledo">Former King - Toodledo</h2>
<p>I&rsquo;ve used it for over twelve years now paying eight years&rsquo; subscription fees while its product philosophy deeply influenced my own strategies for managing time effectively.I&rsquo;ll introduce some features/details about Toodledo that worked quite well:</p>
<h3 id="detailed-features">Detailed Features</h3>
<h4 id="recurring-task-functionality">Recurring Task Functionality</h4>
<p>Toodledo supports recurring task functionality allowing users set up repeating periods like daily / weekly / monthly etc., so when a completed item reappears automatically in your active list ready for further processing.This feature helps users manage routine activities more efficiently like regular meetings,daily email handling,daily reviews etc..</p>
<p>




<img loading="lazy" src="/images/202302/repeat-1.png" alt="repeat-1"  />


</p>
<p>




<img loading="lazy" src="/images/202302/repeat-2.png" alt="repeat-2"  />


</p>
<h4 id="rich-time-function-types">Rich Time Function Types</h4>
<p>




<img loading="lazy" src="/images/202302/toodledo-due.png" alt="Toodledo Due"  />


</p>
<p>




<img loading="lazy" src="/images/202302/toodledo-timer.png" alt="Toodledo Timer"  />


</p>
<h4 id="search-function">Search Function</h4>
<p>Search function provided by Toodledo is very powerful supporting complex logical queries(offers conditional combinations
of AND/OR searches).Users could search based on multiple criteria including name,label,date,priority etc..This feature
helps users organize their workload more efficiently.I was highly dependent upon this feature during organization phase
hence couldn&rsquo;t leave Toodledo at one point.</p>
<p>




<img loading="lazy" src="/images/202302/toodledo-search.png" alt="Toodledo Search"  />


</p>
<h3 id="tools-and-plugins-i-developed">Tools and Plugins I Developed</h3>
<p>Overall, I would still recommend Toodledo to everyone. I have developed multiple tools and plugins based on the API provided by Toodledo. Let me introduce them to you:</p>
<h4 id="buff-1-elegant-subscription-of-toodledo-calendar">Buff 1: Elegant Subscription of Toodledo Calendar</h4>
<p>Toodledo provides calendar subscription capability that displays tasks in various calendar software. However, the original information is very messy, does not consider task time, and also calculates time incorrectly. Therefore, I developed a web service called <a href="https://github.com/alswl/toodledo_calendar_filter">toodledo_calendar_filter</a>.</p>
<p>It can display Toodledo&rsquo;s tasks more friendly on the calendar system. Specifically, it can filter <a href="https://www.toodledo.com/info/help_ical.php">Toodledo&rsquo;s iCal</a> and only display tasks with due dates and durations. If you also have similar needs, you can use my online service directly (<a href="https://toodledo-calendar-filter.alswl.com">https://toodledo-calendar-filter.alswl.com</a>).</p>
<p>Before:</p>
<p>




<img loading="lazy" src="/images/202302/calendar-before.png" alt="calendaer-before"  />


</p>
<p>After:</p>
<p>




<img loading="lazy" src="/images/202302/calendar-after.png" alt="calendar-after"  />


</p>
<h4 id="buff-2-make-toodeldo-have-gmail-shortcut-keys">Buff 2: Make Toodeldo Have Gmail Shortcut Keys</h4>
<p>When using Toodeldo for task management, do you feel that the operation is cumbersome and mouse efficiency is low? Do you miss Gmail-style shortcut keys? If so, then my project [alswl/my-toodleodo] (<a href="https://github.com/alswl/my-toodleodo">https://github.com/alswl/my-toodleodo</a>) can help solve this problem.</p>
<p>It is a Greasemonkey script for Toodleodo that provides a series of Gmail-style shortcut keys so that you can quickly operate like using Gmail in Toodleodo including moving tasks (<code>j</code> / <code>k</code>), task operations (<code>x</code> marks completion , <code>enter</code> starts the task), switching task views (<code>g s</code> jumps to search), etc.. It runs stably on Chrome/Safari/Firefox browsers; if you want to improve your efficiency when using Toodeldo，you may try it out.</p>
<h4 id="buff-3-command-line-tool-go-toodeldo">Buff 3: Command Line Tool go-toodeldo</h4>
<p>In order to quickly collect tasks，I once used a CLI tool ([wsargent/toodeldo] (<a href="https://github.com/wsargent/toodeldo">https://github.com/wsargent/toodeldo</a>)) on Github。However，it was based on version 1 of API which has been announced by official seven or eight years ago will be offline soon。So I made my own small project called <a href="https://github.com/alswl/go-toodeldo">go-toodeldo </a>.</p>
<p>At first，go-toodeoldo only provided basic CLI functions。Later，I gradually added complete SDK、CLI full functionality even an interactive <mark>TUI application</mark> allowing users to conveniently use Toodeoldo in Terminal。</p>
<p>




<img loading="lazy" src="/images/202302/go-toodledo.png" alt="go-toodledo"  />


</p>
<p>Toodeoldo does not provide OpenAPI interface officially；I generated a reverse-engineered copy of [go-TOODEOLDO/swagger.yaml] (Https：// github .com / alswl / go-TOODEOLDO/blob/master/api/swagger.yaml)，if anyone else has development requirements for TOODEOLDO API ，they could directly use this API。</p>
<h3 id="leaving">Leaving</h3>
<p>Recently，I have become increasingly disappointed with the stability of Toodeldo -the task management service I&rsquo;ve been using all along。
They[changed their new service provider]（Https：// blog .tooleldo .com/hello-from-the-new-Tooleldo-team/)，
and there are more frequent occurrences of unstable services while new team’s product capabilities also raise some questions.
Therefore,I decided to start looking for better task management services。
Because Kindle stopping its services in China event makes me doubt about cloud services&rsquo; reliability。
Therefore,I started looking for some<mark>localized solutions</mark>that could be serviced through network disks(such as iCloud),
so as to better protect my data privacy.</p>
<h2 id="final-winner---obsidian-tasks">Final Winner - Obsidian Tasks</h2>
<p><a href="https://obsidian.md/">Obsidian</a> is a personal knowledge management (KMS) and note-taking application based on local files, which helps users organize, link and analyze their notes and ideas. It is a purely local software that can be synchronized across multiple devices using methods such as network disks/NAS.</p>
<p><a href="https://github.com/obsidian-tasks-group/obsidian-tasks">Obsidian Tasks</a> is a powerful Obsidian plugin that allows you to easily manage tasks and to-do items in Obsidian. This plugin can add tasks to your notes through simple syntax, automatically mark the status of tasks according to their completion status. You can use Obsidian Tasks to track personal tasks, work tasks, study tasks, etc. In addition, it also has some other features such as custom task styles, creating filters to find tasks, and automatically moving tasks based on their status. Obsidian + Obsidian Tasks are a perfect combination that can help you better manage your to-do list and improve your productivity.</p>
<p>




<img loading="lazy" src="/images/202302/obisidian-tasks.png" alt="Obsidian Tasks"  />


</p>
<p><small>Image from <a href="https://github.com/obsidian-tasks-group/obsidia">https://github.com/obsidian-tasks-group/obsidia</a></small></p>
<p>My personal KMS has been fully migrated from [Notion] (<a href="http://notion.com/)to">http://notion.com/)to</a> Obisidan with low migration costs using Obisidan Tasks. After learning about Obsidain Task for some time,I have smoothly transferred my previous usage patterns of &ldquo;organizing&quot;and &ldquo;next task&quot;to Obisidan Task.I will continue introducing how I efficiently use Obisidan Task in these two scenarios.</p>
<p>I organize my pending task in the following ways:</p>
<ul>
<li>Ordinary document task marked with <code>[ ]</code>, usually small scattered ones.</li>
<li>Special documents ending with <code>.todo.md</code> for overall project coordination.</li>
<li>Documents tagged with <code>#todo</code>, usually big issues where I split out several <code>Tasks</code> at the top after splitting off the <code>TODO</code> queue tag.</li>
</ul>
<p>Based on this organizational structure,I easily handle these two scenarios: <strong>organizing</strong>and <strong>next task</strong>:</p>
<h3 id="classification-means-quick-review-1">Classification means quick review</h3>
<p>Use several views<mark>to present the recorded tasks in multiple views</mark>, including:</p>
<ul>
<li>Today&rsquo;s perspective
<ul>
<li>non-repeated: one-time task，often more important</li>
<li>repeat：repetitive task，such as weekly meetings or appointments，often transactional</li>
</ul>
</li>
<li>Time perspective
<ul>
<li>Upcoming expiration date（within 7 days）</li>
</ul>
</li>
<li>Single Tasks：tasks scattered throughout daily affairs without being included in files ending with <code>.todo</code></li>
<li>Project：tasks arranged by project</li>
<li>Tagged with <code>#todo</code>, often requiring processing of an entire document</li>
</ul>
<p>These views allow you to classify your tasks better and quickly review them.By using these views,you can better manage your pending items,and improve your productivity.</p>
<p>This is my projects / View.todo.md`:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="gu">## Today
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="cl"><span class="gs">**WIP**</span>
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>status.type is IN_PROGRESS
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">**High（Planning）**</span>
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>not done
</span></span><span class="line"><span class="cl">priority is above medium
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">**None repetead due today**</span>
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>((not done) AND (due before in 1 day)) OR (done on today)
</span></span><span class="line"><span class="cl">is not recurring
</span></span><span class="line"><span class="cl">sort by priority
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl"><span class="gs">**Repeated due today**</span>
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>((not done) AND (due before in 1 day)) OR (done on today)
</span></span><span class="line"><span class="cl">is recurring
</span></span><span class="line"><span class="cl">sort by priority
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">**Over due before today**</span>
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>not done
</span></span><span class="line"><span class="cl">due before today
</span></span><span class="line"><span class="cl">sort by priority
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">**Today complete**</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>done
</span></span><span class="line"><span class="cl">done on today
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">## Future (no repeat)
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="cl"><span class="gs">**in 1 day**</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>not done
</span></span><span class="line"><span class="cl">due before in 1 day
</span></span><span class="line"><span class="cl">is not recurring
</span></span><span class="line"><span class="cl">sort by priority
</span></span><span class="line"><span class="cl">sort by due
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">**in 3 day**</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>not done
</span></span><span class="line"><span class="cl">due after in 1 day
</span></span><span class="line"><span class="cl">due before in 3 day
</span></span><span class="line"><span class="cl">is not recurring
</span></span><span class="line"><span class="cl">sort by priority
</span></span><span class="line"><span class="cl">sort by due
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">**in 7 day**</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>not done
</span></span><span class="line"><span class="cl">due after in 3 day
</span></span><span class="line"><span class="cl">due before in 7 day
</span></span><span class="line"><span class="cl">is not recurring
</span></span><span class="line"><span class="cl">sort by priority
</span></span><span class="line"><span class="cl">sort by due
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">## Singles Tasks
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="cl"><span class="gs">**in 7d（non project x no repeate）**</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>not done
</span></span><span class="line"><span class="cl">status.type is not CANCELLED
</span></span><span class="line"><span class="cl">NOT (path includes .index)
</span></span><span class="line"><span class="cl">NOT (path includes .todo)
</span></span><span class="line"><span class="cl">NOT (path includes .notodo)
</span></span><span class="line"><span class="cl">due after in 7 days
</span></span><span class="line"><span class="cl">sort by priority, due
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">**none project x no due x no repeat**</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>not done
</span></span><span class="line"><span class="cl">status.type is not CANCELLED
</span></span><span class="line"><span class="cl">NOT (path includes .index)
</span></span><span class="line"><span class="cl">NOT (path includes .todo)
</span></span><span class="line"><span class="cl">NOT (path includes .notodo)
</span></span><span class="line"><span class="cl">no due date
</span></span><span class="line"><span class="cl">sort by priority, due
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">## Projects
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="cl">TODO
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">## Help
</span></span></span><span class="line"><span class="cl"><span class="gu"></span><span class="k">
</span></span></span><span class="line"><span class="cl"><span class="k">&gt; </span><span class="ge">[Queries Syntax](https://obsidian-tasks-group.github.io/obsidian-tasks/queries/)
</span></span></span></code></pre></div><h3 id="what-is-the-next-task">What is the next task?</h3>
<p>In Obsidian&rsquo;s <a href="https://help.obsidian.md/Plugins/Daily+notes">Daily Note</a> plugin, set the template to <code>_templates/daily</code> so that you can have a daily to-do list that you can use anytime.</p>
<p>This is my Daily setup, divided into four sections: Today&rsquo;s due single tasks / Today&rsquo;s due repeating tasks (transactional and unimportant) / Today&rsquo;s completed tasks / Today&rsquo;s new tasks (usually Single).</p>
<p>This is my <code>_template/daily.md</code> file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="gu">## TODO
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="cl"><span class="gs">**WIP**</span>
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>status.type is IN_PROGRESS
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">**New tasks**</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">**Tasks view - today**</span>
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>((not done) AND (due before {{date}})) OR ((not done) AND (due on {{date}})) OR (done on {{date}})
</span></span><span class="line"><span class="cl">is not recurring
</span></span><span class="line"><span class="cl">sort by priority, due
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">**Tasks view - today(repeated)**</span>
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>((not done) AND (due before {{date}})) OR ((not done) AND (due on {{date}})) OR (done on {{date}})
</span></span><span class="line"><span class="cl">is recurring
</span></span><span class="line"><span class="cl">sort by priority, due
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">**Over due date**</span>
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>not done
</span></span><span class="line"><span class="cl">due before {{date}}
</span></span><span class="line"><span class="cl">sort by priority, due
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">**Projects**</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">YOURS
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">**Tasks view - today done**</span>
</span></span><span class="line"><span class="cl"><span class="s">```tasks
</span></span></span><span class="line"><span class="cl"><span class="s"></span>done
</span></span><span class="line"><span class="cl">done on {{date}}
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span></code></pre></div><h3 id="what-are-the-drawbacks-of-obsidian-tasks">What are the drawbacks of Obsidian Tasks?</h3>
<p>Firstly, it should be noted that Obsidian Tasks is a plugin for Obsidian. If you have not used Obsidian before, it may take some time to get familiar with it. However, if you are already using Obsidian, the bidirectional linking feature of Obsidian Tasks will provide excellent support for GTD scenarios, which is both an advantage and a disadvantage.</p>
<p>Secondly, at present, Obsidian Tasks does not offer timer functionality. However, personally speaking, this is no longer important to me. With age and over ten years of GTD training under my belt, I no longer need tools to maintain focus. When working I am quite focused and do not get distracted frequently.</p>
<p>Finally, it should be noted that there are issues with Obsidian itself. As a tool based on local files only without online tools (although there are other cloud-based solutions), if you want an online service accessible from both your computer and phone then perhaps Obsidian Tasks may not be suitable for you. For me personally though I use iCloud storage as part of Apple&rsquo;s ecosystem so all my data is stored in iCloud Drive; I use the macOS application and iOS version of <a href="https://obsdian.md/download">Obsidian</a> which allows me to easily use the same Vault (i.e., knowledge base) between my MacBook and iPhone. Before launching either app though I make sure that syncing has completed first.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Time management is an unavoidable topic for modern workers but also one we often struggle with too. The methodology behind GTD provides us with an easy yet efficient way to manage our workloads allowing us <mark>to quickly end procrastination or distraction states</mark>and fully immerse ourselves in our work.</p>
<p>Tools are important but they cannot solve all problems alone; when managing time effectively what matters most is being clear about <mark>what your goals actually are</mark>. When you have a clear mission in mind it will constantly float around in your head meaning even without GTD tools managing things becomes easier.</p>
<p>I hope this article introducing the GTD method can help bring benefits into your work life allowing you to complete tasks more efficiently while still enjoying life&rsquo;s beauty too! Remember: time is limited so cherish every minute; seize every opportunity making your own life more wonderful!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to fix keyboard - from coding to electronics factory worker</title>
      <link>https://en.blog.alswl.com/2022/10/fix-keyboard/</link>
      <pubDate>Wed, 19 Oct 2022 10:51:01 +0800</pubDate>
      
      <guid>https://en.blog.alswl.com/2022/10/fix-keyboard/</guid>
      <description>In order to be well prepared, how can I successfully join an electronics factory after graduating at the age of 35?
Learn from fixing keyboards(it&amp;rsquo;s a joke)
Background The keyboard I using is the ErgoDox, an ergonomically split keyboard. More details about ErgoDox can be found in my previous answer.
(former keycap color scheme + hand rest).
After seven or eight years of work, it has been into the water, into the coffee, but also into the soy milk, now finally a few keys are not flexible, pressed a sticky feeling, can not provide a smooth coding feel.</description>
      <content:encoded><![CDATA[<p>




<img loading="lazy" src="/images/202210/fu-tu-kang.png" alt="fu-tu-kang"  />


</p>
<blockquote>
<p>In order to be well prepared, how can I successfully join an electronics factory after graduating at the age of 35?</p>
<p>Learn from fixing keyboards(it&rsquo;s a joke)</p>
</blockquote>
<h2 id="background">Background</h2>
<p>The keyboard I using is the ErgoDox, an ergonomically split keyboard. More details about ErgoDox can be found in my previous <a href="https://www.zhihu.com/question/52088337/answer/141073759">answer</a>.</p>
<p>




<img loading="lazy" src="/images/202210/keyboard-view.png" alt="keyboard-view"  />


</p>
<p>(former keycap color scheme + hand rest).</p>
<p>




<img loading="lazy" src="/images/202210/keyboard-view-2.png" alt="keyboard-view-2"  />


</p>
<p>After seven or eight years of work, it has been into the water, into the coffee, but also into the soy milk, now finally a few keys are not flexible, pressed a sticky feeling, can not provide a smooth coding feel.</p>
<p>After a few months of using a back up Filco, I finally made up my mind to get the ErgoDox fixed.</p>
<h2 id="prepare">Prepare</h2>
<p>




<img loading="lazy" src="/images/202210/prepare.png" alt="prepare"  />


</p>
<ul>
<li>Soldering Iron</li>
<li>Solder Sucker</li>
<li>Solder</li>
<li>Key Shaft</li>
<li>Seiko Screw Driver Kit</li>
<li>Key Puller</li>
<li>Cherry Key Switch Puller</li>
</ul>
<p>For those without soldering experience, you can learn how to soldering.</p>
<p><a href="https://www.bilibili.com/video/BV1xt4y157LM/">女生都能学会的键盘焊接换轴教程_哔哩哔哩_bilibili</a></p>
<p><a href="https://www.bilibili.com/video/BV1Ui4y177kk/">电烙铁的错误和正确使用方法_哔哩哔哩_bilibili</a></p>
<h2 id="processing">Processing</h2>
<center><mark><b>Check which key shafts to replace, press one and listen to one</b></mark></center>
<p>




<img loading="lazy" src="/images/202210/step-1.png" alt="step-1"  />


</p>
<center><mark><b>Remove the shell</b></mark></center>
<p>




<img loading="lazy" src="/images/202210/step-2.png" alt="step-2"  />


</p>
<center><mark><b>Remove the corresponding keycaps (note that F J keycaps are different)</b></mark></center>
<p>




<img loading="lazy" src="/images/202210/step-3.png" alt="step-3"  />


</p>
<center><mark><b>Melt the solder and suck the melted solder away with a solder sucker</b></mark></center>
<p>




<img loading="lazy" src="/images/202210/step-4.png" alt="step-4"  />


</p>
<center><mark><b>With a key switch puller, remove it from the front, remember there is a soft clip, to up and down direction (i.e. cherry logo direction + opposite force)</b></mark></center>
<p>




<img loading="lazy" src="/images/202210/step-5.png" alt="step-5"  />


</p>
<center><mark><b>Look at the coffee and soy milk that went in</b></mark></center>
<p>




<img loading="lazy" src="/images/202210/step-6.png" alt="step-6"  />


</p>
<center><mark><b>Weld the new key shaft on</b></mark></center>
<p>




<img loading="lazy" src="/images/202210/step-7.png" alt="step-7"  />


</p>
<center><mark><b>Sucking away the debris spit out the look of the solder sucker</b></mark></center>
<p>




<img loading="lazy" src="/images/202210/step-8.png" alt="step-8"  />


</p>
<center><mark><b>Final assembly</b></mark></center>
<p>




<img loading="lazy" src="/images/202210/keyboard-final.png" alt="keyboard-final"  />


</p>
<h2 id="summary">Summary</h2>
<p>I have that feeling of typing smoothly again ~</p>
<p>Youthfulness is back~</p>
<p>Finally, I&rsquo;d like to share my ErgoDox Layout configuration:</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/alswl/ergodox-firmware/blob/master/src/keyboard/ergodox/layout/alswl-layout.c">alswl/ergodox-firmware/blob/master/src/keyboard/ergodox/layout/alswl-layout.c</a> My layout configuration, Five layouts：Normal / Funtion Key / Number Pad / MediaKey / Arrow</li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/alswl/ergodox-firmware/blob/master/src/main.c%23L127">alswl/ergodox-firmware/blob/master/src/main.c#L127</a> configuration for LED, lighting on to indicated the different layout</li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/alswl/teensy_loader_cli">alswl/teensy_loader_cli</a><a href="https://link.zhihu.com/?target=https%3A//github.com/alswl/teensy_loader_cli">alswl/teensy_loader_cli</a> teensy loader cli works for macSO, the ofiicial binary not works when press the reset button</li>
</ul>
<p>If you get something out of it, give it a like.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Self hosted online collaborative drawing platform Excalidraw</title>
      <link>https://en.blog.alswl.com/2022/10/self-hosted-excalidraw/</link>
      <pubDate>Mon, 17 Oct 2022 00:08:31 +0800</pubDate>
      
      <guid>https://en.blog.alswl.com/2022/10/self-hosted-excalidraw/</guid>
      <description>First of all, I&amp;rsquo;d like to thank my in-laws for taking the baby for summer vacation, so I can have a weekend to develop this system.
Also thanks to my wife, I did my own thing for two days during the weekend and didn&amp;rsquo;t criticize me.
Lastly, I would like to thank the company for the team building, providing a hotel to stay and spending a night to fix the Chinese handwriting.</description>
      <content:encoded><![CDATA[<blockquote>
<p>First of all, I&rsquo;d like to thank my in-laws for taking the baby for summer vacation, so I can have a weekend to develop this system.</p>
<p>Also thanks to my wife, I did my own thing for two days during the weekend and didn&rsquo;t criticize me.</p>
<p>Lastly, I would like to thank the company for the team building, providing a hotel to stay and spending a night to fix the Chinese handwriting.</p>
<p>Note: This is the open source version of Excalidraw, thanks to the community</p>
</blockquote>
<h2 id="1-excalidraw">#1 Excalidraw</h2>
<blockquote>
<p>Introduce Excalidraw, product features</p>
</blockquote>
<p>What is Excalidraw, <mark>it&rsquo;s (probably) the most powerful online collaborative drawing tool</mark>, you can try it by visiting <a href="https://excalidraw.com/">Excalidraw</a>.</p>
<p>




<img loading="lazy" src="/images/202210/anatomy_of_an_azure_function.png" alt="anatomy_of_an_azure_function.png"  />


</p>
<p>If you did not want get a blank diagram, then you can also visit this public panel <a href="https://excalidraw.com/#room=e630a562422e6e9d94db,IXndkz3JfOSGrlswJRC83Q">Excalidraw</a> to join in the creation.</p>
<p>




<img loading="lazy" src="/images/202210/excalidraw-share-room.png" alt="excalidraw-share-room.png"  />


</p>
<p>Excalidraw works very well, I summarize a few points.</p>
<ul>
<li>Hand Writing style (Hand Writing) to avoid OCD, what a pixel difference, are gone lie flat in the end</li>
<li>No delay in online collaboration, ideal for communication and collaboration in the post-epidemic era</li>
<li>The design of the product is excellent: shortcuts, object connection sticking, selected files directly to the local storage and other details are there</li>
</ul>
<p>




<img loading="lazy" src="/images/202210/excalidraw-homepage.png" alt="excalidraw-homepage.png"  />


</p>
<p>After this product was promoted internally by our internal partners, we quickly fell in love with it and put a lot of diagrams on Excalidraw, but it also led to a new problem.</p>
<center><mark><b>Public SaaS services have data security risks</b></mark></center>
<center><mark><b> What to do? I'm going to self hosted it!</b></mark></center>
<h2 id="2-before-deploying-lets-understand-how-excalidraw-works">#2 Before deploying, let&rsquo;s understand how Excalidraw works</h2>
<p><strong>How Excalidraw works and how self hosted works</strong>：</p>
<p>




<img loading="lazy" src="/images/202210/excalidraw-arch.png" alt="excalidraw-arch.png"  />


</p>
<p>So what is the core difficulty of self hosted.</p>
<p>Solving the excalidraw-storage data storage problem, aka. replacing the Google Cloud Platform&rsquo;s firebase service.</p>
<h2 id="3-self-hosted-poc">#3 Self hosted PoC</h2>
<blockquote>
<p>If things don&rsquo;t work out, ask yourself</p>
<p>- Mencius</p>
<p>It is better to seek from Github than to seek from yourself.</p>
<p>- alswl</p>
</blockquote>
<p>Let&rsquo;s start by looking at Excalidraw&rsquo;s storage system.
Firebase is Google&rsquo;s Serverless service, formerly an independent company (and quite popular), but later acquired by GCP.</p>
<p>




<img loading="lazy" src="/images/202210/firebase.png" alt="firebase.png"  />


</p>
<p>




<img loading="lazy" src="/images/202210/firebase-features.png" alt="firebase-features.png"  />


</p>
<p>I started with the idea of replacing Firebase and found a community service <a href="https://supabase.com/">Supabase</a> (found a free SaaS service, amazing)</p>
<p>




<img loading="lazy" src="/images/202210/supabase.png" alt="supabase.png"  />


</p>
<p>However, after careful research, I found that Supabase&rsquo;s API is not compatible with firebase and <mark> cannot be simply replaced with </mark>.</p>
<p>Excalidraw also relies on Excalidraw+ to provide a paid service. Is there a simple and viable solution from the community? I found a bit of a solution within the community:</p>
<ul>
<li><a href="https://github.com/excalidraw/excalidraw/issues/1772">Self hosting Excalidraw - Umbrella issue · Issue #1772 · excalidraw/excalidraw</a></li>
<li><a href="https://github.com/excalidraw/excalidraw/discussions/3879">Collaboration mode - Self-hosting vs Collab on top of · Discussion #3879 · excalidraw/excalidraw (github.com)</a></li>
</ul>
<p>They gave a way (although it was later proven that there was still a crooked way).</p>
<ul>
<li><a href="https://gitlab.com/kiliandeca/excalidraw-fork">Kilian Decaderincourt / Excalidraw Fork · GitLab</a> forked excalidraw</li>
<li><a href="https://gitlab.com/kiliandeca/excalidraw-storage-backend">Kilian Decaderincourt / excalidraw-storage-backend · GitLab</a></li>
</ul>
<p>So I started reviewing their solution, opened the code and saw that I had the right idea (replacing several interfaces of firebase), using my own KV storage (Redis / MySQL / Mongo) to replace it.</p>
<p>




<img loading="lazy" src="/images/202210/jing-shen.png" alt="jing-shen.png"  />


</p>
<p>Attempted deployment and immediately ran into problems with:</p>
<center><mark><b> Dockerfile build failed </b></mark></center>
<center><mark><b> Versions too far behind upstream (2020 -> 2022)</b></mark></center>
<center><mark><b> Merged with Rebase Unable to follow Upstream</b></mark></center>
<p>What a coincidence that I&rsquo;m <mark><b>Frontend Intern // Community Patching Specialist // Kubernetes Cleaner // YAML Senior Specialist </b></mark>, specializing in these few things.</p>
<h2 id="4-lets-do-it">#4 Let&rsquo;s do it</h2>
<ul>
<li><a href="https://github.com/alswl/excalidraw-storage-backend">alswl/excalidraw-storage-backend: Excalidraw Backend</a>
<ul>
<li>build with Dockerfile in two stages <a href="https://github.com/alswl/excalidraw-storage-backend/commit/d841d734ab02659df370a6bdef3f1d8947696580%5D(https://github.com/alswl/excalidraw-storage-backend/commit/d841d734ab02659df370a6bdef3f1d8947696580)">https://github.com/alswl/excalidraw-storage-backend/commit/d841d734ab02659df370a6bdef3f1d8947696580](https://github.com/alswl/excalidraw-storage-backend/commit/d841d734ab02659df370a6bdef3f1d8947696580)</a></li>
<li>using Chinese mirror <a href="https://github.com/alswl/excalidraw-storage-backend/commit/30a6da9c87b367bb1fbde449f754923638545fa8">feat: china mirror · alswl/excalidraw-storage-backend@30a6da9</a></li>
</ul>
</li>
<li><a href="https://github.com/alswl/excalidraw">alswl/excalidraw: Virtual whiteboard for sketching hand-drawn like diagrams</a>
<ul>
<li>fix, using http stroage instead of firebase</li>
<li><a href="https://github.com/alswl/excalidraw/pull/2">Feat/self host backend by alswl · Pull Request #2 · alswl/excalidraw</a></li>
</ul>
</li>
</ul>
<center><mark><b> Modification code architecture </b></mark></center>
<p>




<img loading="lazy" src="/images/202210/self-hosted-excalidraw.png" alt="self-hosted-excalidraw.png"  />


</p>
<h2 id="5-futureor-not">#5 Future(or not)</h2>
<p>Excalidraw is a free version of the SaaS service, <mark><b>Excalidraw+ is a paid version </b></mark>, what&rsquo;s the difference?</p>
<p>




<img loading="lazy" src="/images/202210/excalidraw-price.png" alt="excalidraw-price.png"  />


</p>
<p>To sum up.</p>
<ul>
<li>More reliable storage, integrated to cloud storage (e.g. iCloud / NAS)</li>
<li>User identification, connected to a common identity system</li>
<li>More personalized permissions control (password access, targeted sharing), tenant control, project group control</li>
<li>Library shared within the domain</li>
<li>Integration with other systems (Yuque, Dingtalk Documents, Lark, etc.)</li>
</ul>
<p>Or, just <mark><b>buy Excalidraw enterprise</b></mark> version!!! Less works, more enjoy.</p>
<h2 id="6-chinese-handwriting-optimization">#6 Chinese handwriting optimization</h2>
<p>One problem is that <mark><b> Chinese fonts are not handwritten </b></mark>, which is very incongruous. Let&rsquo;s see which fonts work first.</p>
<p>Chinese handwriting fonts supported by macOS:</p>
<ul>
<li><a href="https://support.apple.com/zh-cn/HT212587">https://support.apple.com/zh-cn/HT212587</a></li>
<li><a href="https://support.apple.com/zh-cn/HT212587">macOS Monterey 附带的字体 - 官方 Apple 支持 (中国)</a></li>
</ul>
<p>cursive family:</p>
<ul>
<li>PanziPen</li>
<li>LingWai</li>
<li>Hannotate</li>
</ul>
<p>




<img loading="lazy" src="/images/202210/hanzipen-sc.png" alt="hanzipen-sc.png"  />


</p>
<p>Windows Chinese support for handwriting is poor, you have to install Office to have more options: 华文行楷; 方正舒体 (release in Office)</p>
<ul>
<li><a href="https://www.zhihu.com/question/22703287">https://www.zhihu.com/question/22703287</a></li>
<li><a href="https://www.zhihu.com/question/22703287">Windows 系统内置的中文字体为什么只有那几种？不多内置几种字体呢？ - 知乎 (zhihu.com)</a></li>
<li><a href="https://zh.m.wikipedia.org/zh-hans/Microsoft_Windows%E5%AD%97%E5%9E%8B%E5%88%97%E8%A1%A8">https://zh.m.wikipedia.org/zh-hans/Microsoft_Windows字型列表</a></li>
</ul>
<p>If not, only the system&rsquo;s own italic KaiTi will work.</p>
<p>Finally, relying on my poor front-end level, I made a PoC and submitted a PR to the official: [feat: simple impl of multi font support, for chinese font by alswl - Pull Request #5604 - excalidraw/excalidraw] (<a href="https://github.com/excalidraw/excalidraw/pull/5604">https://github.com/excalidraw/excalidraw/pull/5604</a>)</p>
<p>Here is the final result.</p>
<p>




<img loading="lazy" src="/images/202210/chinese-hand-writing.png" alt="chinese-hand-writing.png"  />


</p>
<hr />
<h2 id="update-2022-12">Update 2022-12</h2>
<p>A few users came to me to ask how to deploy it.
So based on the above solution, I provided a set of one-click pull-up services based on Docker Compose: with collaboration, Chinese font support.
See <a href="https://github.com/alswl/excalidraw-collaboration">alswl/excalidraw-collaboration</a>.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>About</title>
      <link>https://en.blog.alswl.com/about/</link>
      <pubDate>Sun, 16 Oct 2022 21:21:00 +0800</pubDate>
      
      <guid>https://en.blog.alswl.com/about/</guid>
      <description>Hi there 👋 I&amp;rsquo;m alsw, 💻 🐵 Coding Monkey</description>
      <content:encoded><![CDATA[<p>Hi there 👋
I&rsquo;m alsw, 💻 🐵 Coding Monkey</p>
]]></content:encoded>
    </item>
    
    
  </channel>
</rss>
